from django.db import models
from django.utils import timezone
from django.template.defaultfilters import slugify
from django.urls import reverse
from django.contrib.auth.models import User



class Post(models.Model):
    title = models.CharField(max_length=200)
    slug = models.SlugField(unique=True)  #slug field - it is used for storing slugs (e.g. this-is-a-slug). SEO or something. Using slugs in the url to fetch a blog post, so this must be unique.
    text = models.TextField()
    author = models.ForeignKey(User, on_delete=models.CASCADE, primary_key=True,) #Here we want to link the author field to a User, which is django’s model for a user. It comes from django.contrib.auth app, which is another useful package shipped with django.
    created_on = models.DateTimeField(default=timezone.now)
    published_date = models.DateTimeField(blank=True, null=True)

    @models.permalink
    def get_absolute_url(self):  #The get_absolute_url of the Post model points to the blog_post_detail which takes a slug parameter. This is the Post detail view, and it fetches the post based on the slug.
        return ('blog_post_detail', (),
                {
                    'slug' :self.slug,
                })

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.title)  #slugify is a helper function to get slug from a string. We won’t need to get the slug from the form, we will generate it ourself using slugify
        super(Post, self).save(*args, **kwargs) #To autogenerate the slug, we override the model save method, whose signature is save(self, *args, **kwargs) We set self.slug to the slug generated by slugify and call the parent save method.  This ensures that every time a model is saved, it will have a slug field.

    def publish(self):
        self.published_date = timezone.now()
        self.save()

    def approve_comments(self):
        return self.comments.filter(approved_comment=True)

    def __str__(self):
        return self.title



class Comment(models.Model):
    post = models.ForeignKey(Post, related_name='comments', on_delete=models.CASCADE, primary_key=True,)  # ForeignKey field is a field that can be used to link this model to any other model. 
    author = models.CharField(max_length=200)
    text = models.TextField()
    created_date = models.DateTimeField(default=timezone.now)
    approved_comment = models.BooleanField(default=False)

    def approve(self):
        self.approved_comment = True
        self.save()

    def get_absolute_url(self):
        return reverse("post_list")

    def __str__(self):
        return self.text



